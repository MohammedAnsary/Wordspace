require 'rails_helper'

# This spec was generated by rspec-rails when you ran the scaffold generator.
# It demonstrates how one might use RSpec to specify the controller code that
# was generated by Rails when you ran the scaffold generator.
#
# It assumes that the implementation code is generated by the rails scaffold
# generator.  If you are using any extension libraries to generate different
# controller code, this generated spec may or may not pass.
#
# It only uses APIs available in rails and/or rspec-rails.  There are a number
# of tools you can use to make these specs even more expressive, but we're
# sticking to rails and rspec-rails APIs to keep things simple and stable.
#
# Compared to earlier versions of this generator, there is very limited use of
# stubs and message expectations in this spec.  Stubs are only used when there
# is no simpler way to get a handle on the object needed for the example.
# Message expectations are only used when there is no simpler way to specify
# that an instance is receiving a specific message.

RSpec.describe UsersController, type: :controller do

  # This should return the minimal set of attributes required to create a valid
  # User. As you add validations to User, be sure to
  # adjust the attributes here as well.
#  let(:valid_attributes) {
#    skip("Add a hash of attributes valid for your model")
#  }

#  let(:invalid_attributes) {
#    skip("Add a hash of attributes invalid for your model")
#  }

  # This should return the minimal set of values that should be in the session
  # in order to pass any filters (e.g. authentication) defined in
  # UsersController. Be sure to keep this updated too.
#  let(:valid_session) { {} }

  # Author: Mayar
  # Date: 30.4.2015
  # checking mymagazines action
  describe 'GET #mymagazines' do
    it 'allows signed in user to get the magazines he is managing' do
      @user = create(:user)
      sign_in @user
      @magazine = create(:magazine)
      @magazine.users << @user
      get :mymagazines, magazines: FactoryGirl.attributes_for(:user)
      expect(assigns(:magazines)).to match_array([@magazine])
    end
  end

#  describe "GET #index" do
#    it "assigns all users as @users" do
#      user = User.create! valid_attributes
#      get :index, {}, valid_session
#      expect(assigns(:users)).to eq([user])
#    end
#  end

#  describe "GET #show" do
#    it "assigns the requested user as @user" do
#      user = User.create! valid_attributes
#      get :show, {:id => user.to_param}, valid_session
#      expect(assigns(:user)).to eq(user)
#    end
#  end

end
